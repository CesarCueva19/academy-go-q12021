// Code generated by MockGen. DO NOT EDIT.
// Source: controller/controller.go

// Package mocks is a generated GoMock package.
package mocks

import (
	model "pokemons/model"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockUsecase is a mock of Usecase interface.
type MockUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockUsecaseMockRecorder
}

// MockUsecaseMockRecorder is the mock recorder for MockUsecase.
type MockUsecaseMockRecorder struct {
	mock *MockUsecase
}

// NewMockUsecase creates a new mock instance.
func NewMockUsecase(ctrl *gomock.Controller) *MockUsecase {
	mock := &MockUsecase{ctrl: ctrl}
	mock.recorder = &MockUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUsecase) EXPECT() *MockUsecaseMockRecorder {
	return m.recorder
}

// GetPokemonByID mocks base method.
func (m *MockUsecase) GetPokemonByID(pokemonID string) (*model.PokemonsData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPokemonByID", pokemonID)
	ret0, _ := ret[0].(*model.PokemonsData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPokemonByID indicates an expected call of GetPokemonByID.
func (mr *MockUsecaseMockRecorder) GetPokemonByID(pokemonID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPokemonByID", reflect.TypeOf((*MockUsecase)(nil).GetPokemonByID), pokemonID)
}

// GetPokemons mocks base method.
func (m *MockUsecase) GetPokemons() ([]*model.PokemonsData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPokemons")
	ret0, _ := ret[0].([]*model.PokemonsData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPokemons indicates an expected call of GetPokemons.
func (mr *MockUsecaseMockRecorder) GetPokemons() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPokemons", reflect.TypeOf((*MockUsecase)(nil).GetPokemons))
}

// InsertPokemonByID mocks base method.
func (m *MockUsecase) InsertPokemonByID(pokemonID string) (*model.PokemonsData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertPokemonByID", pokemonID)
	ret0, _ := ret[0].(*model.PokemonsData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertPokemonByID indicates an expected call of InsertPokemonByID.
func (mr *MockUsecaseMockRecorder) InsertPokemonByID(pokemonID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertPokemonByID", reflect.TypeOf((*MockUsecase)(nil).InsertPokemonByID), pokemonID)
}
